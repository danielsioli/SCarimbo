/*
 * Copyright (C) 2007  Daniel da Silva Oliveira
 *
 * This file is part of SCarimbo
 *
 * SCarimbo is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Contact: Daniel da Silva Oliveira danieloliveira@anatel.gov.br
 */

/*
 * AjustmentJFrame.java
 *
 * Created on 2 de Julho de 2007, 22:49
 */
package settings;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.io.File;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author  Daniel
 */
public class AjustmentJFrame extends javax.swing.JFrame {

    private JLabel foregroundImageJLabel;
    private Component parent;
    private String backgroundImage;
    private boolean foregroundIconSet = false;

    /**
     * Creates new form AjustmentJFrame
     */
    public AjustmentJFrame(Component parent, String foregroundImage, String backgroundImage) {
        this.parent = parent;
        this.backgroundImage = backgroundImage;
        foregroundImageJLabel = new javax.swing.JLabel();
        if (foregroundImage != null && new File(foregroundImage).exists()) {
            foregroundIconSet = true;
            foregroundImageJLabel.setIcon(new javax.swing.ImageIcon(foregroundImage));
        } else {
            foregroundImageJLabel.setIcon(new javax.swing.ImageIcon(""));
        }

        foregroundImageJLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel2MouseDragged(evt);
            }
        });

        foregroundImageJLabel.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel2MouseExited(evt);
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
        });

        getContentPane().add(foregroundImageJLabel);
        initComponents();
        setLocationRelativeTo(null);
    }

    public AjustmentJFrame(Component parent, URL foregroundImage, String backgroundImage) {
        this.parent = parent;
        this.backgroundImage = backgroundImage;
        foregroundImageJLabel = new javax.swing.JLabel();
        foregroundIconSet = true;
        foregroundImageJLabel.setIcon(new javax.swing.ImageIcon(foregroundImage));

        foregroundImageJLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel2MouseDragged(evt);
            }
        });

        foregroundImageJLabel.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel2MouseExited(evt);
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
        });

        getContentPane().add(foregroundImageJLabel);
        initComponents();
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Gerado ">//GEN-BEGIN:initComponents
    private void initComponents() {
        backgroundImageJLabel = new javax.swing.JLabel();

        setTitle("Ajuste");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(this.getClass().getResource("/images/Mini - SCarimbo.png")).getImage());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        backgroundImageJLabel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundImageJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        if(backgroundImage != null && new File(backgroundImage).exists()){
            backgroundImageJLabel.setIcon(new ImageIcon(backgroundImage));
        }else{
            backgroundImageJLabel.setIcon(new javax.swing.ImageIcon(""));
        }
        backgroundImageJLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        backgroundImageJLabel.setAlignmentY(0.0F);
        backgroundImageJLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundImageJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundImageJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_formKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setVisible(false);
        parent.setEnabled(true);
        parent.requestFocus();
    }//GEN-LAST:event_formWindowClosing

    private void keyPressed(KeyEvent evt) {
        int kC = evt.getKeyCode();
        int newX = foregroundImageJLabel.getLocation().x;
        int newY = foregroundImageJLabel.getLocation().y;
        int step = 1;
        if (kC == KeyEvent.VK_UP || kC == KeyEvent.VK_KP_UP) {
            newY -= step;
        } else if (kC == KeyEvent.VK_DOWN || kC == KeyEvent.VK_KP_DOWN) {
            newY += step;
        } else if (kC == KeyEvent.VK_LEFT || kC == KeyEvent.VK_KP_LEFT) {
            newX -= step;
        } else if (kC == KeyEvent.VK_RIGHT || kC == KeyEvent.VK_KP_RIGHT) {
            newX += step;
        } else if (kC == KeyEvent.VK_ENTER) {
            formWindowClosing(null);
        } else if (kC == KeyEvent.VK_ESCAPE) {
            formWindowClosing(null);
        }
        foregroundImageJLabel.setBounds(newX, newY, foregroundImageJLabel.getIcon().getIconWidth(), foregroundImageJLabel.getIcon().getIconHeight());
    }
    int originalX = 0;
    int originalY = 0;

    private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {
        setCursor(new Cursor(Cursor.MOVE_CURSOR));
    }

    private void jLabel2MouseExited(java.awt.event.MouseEvent evt) {
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }

    private void jLabel2MousePressed(java.awt.event.MouseEvent evt) {
        originalX = evt.getX();
        originalY = evt.getY();
    }

    private void jLabel2MouseDragged(java.awt.event.MouseEvent evt) {
        int newX = evt.getX() - originalX + foregroundImageJLabel.getLocation().x;
        int newY = evt.getY() - originalY + foregroundImageJLabel.getLocation().y;
        foregroundImageJLabel.setBounds(newX, newY, foregroundImageJLabel.getIcon().getIconWidth(), foregroundImageJLabel.getIcon().getIconHeight());
    }

    public int getCenterXOffset() {
        return foregroundImageJLabel.getLocation().x - 2 - backgroundImageJLabel.getLocation().x + foregroundImageJLabel.getIcon().getIconWidth() / 2;
    }

    public int getCenterYOffset() {
        return foregroundImageJLabel.getLocation().y - 2 - backgroundImageJLabel.getLocation().y - foregroundImageJLabel.getIcon().getIconHeight() / 2;
    }

    public int getXOffset() {
        return foregroundImageJLabel.getLocation().x - 2 - backgroundImageJLabel.getLocation().x;
    }

    public void setCenterOffset(int x, int y) {
        foregroundImageJLabel.setBounds(x + 2 + backgroundImageJLabel.getLocation().x - foregroundImageJLabel.getIcon().getIconWidth() / 2, y + 2 + backgroundImageJLabel.getLocation().y + foregroundImageJLabel.getIcon().getIconHeight() / 2, foregroundImageJLabel.getIcon().getIconWidth(), foregroundImageJLabel.getIcon().getIconHeight());
    }

    public int getYOffset() {
        return foregroundImageJLabel.getLocation().y - 2 - backgroundImageJLabel.getLocation().y;
    }

    public void setZeroOffset() {
        foregroundImageJLabel.setBounds(backgroundImageJLabel.getLocation().x + 2 + backgroundImageJLabel.getIcon().getIconWidth() / 2 - foregroundImageJLabel.getIcon().getIconWidth() / 2, backgroundImageJLabel.getLocation().y + 2 + backgroundImageJLabel.getIcon().getIconHeight() / 2 - foregroundImageJLabel.getIcon().getIconHeight() / 2, foregroundImageJLabel.getIcon().getIconWidth(), foregroundImageJLabel.getIcon().getIconHeight());
    }

    public void setOffset(int x, int y) {
        foregroundImageJLabel.setBounds(x + 2 + backgroundImageJLabel.getLocation().x, y + 2 + backgroundImageJLabel.getLocation().y, foregroundImageJLabel.getIcon().getIconWidth(), foregroundImageJLabel.getIcon().getIconHeight());
    }

    public void setBackgroundImage(String backgroundImage) {
        this.backgroundImage = backgroundImage;
        if (backgroundImage != null) {
            ImageIcon oldImageIcon = (ImageIcon) backgroundImageJLabel.getIcon();
            ImageIcon newImageIcon = new ImageIcon(backgroundImage);
            backgroundImageJLabel.setIcon(new javax.swing.ImageIcon(backgroundImage));
            if (oldImageIcon != null) {
                if (oldImageIcon.getIconWidth() != newImageIcon.getIconWidth() || oldImageIcon.getIconHeight() != newImageIcon.getIconHeight()) {
                    setZeroOffset();
                }
            }
        }
    }

    public void setForegroundImage(String foregroundImage) {
        if (foregroundImage != null) {

            foregroundImageJLabel.setIcon(new javax.swing.ImageIcon(foregroundImage));
            if (!foregroundIconSet) {
                System.err.println(foregroundImageJLabel.getIcon().getIconWidth() + " " + foregroundImageJLabel.getIcon().getIconHeight());
                setZeroOffset();
            }
            foregroundIconSet = true;
        }
    }

    public void setForegroundImageAsResource(String foregroundImage) {
        if (foregroundImage != null) {
            foregroundImageJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(foregroundImage)));
            if (!foregroundIconSet) {
                setZeroOffset();
            }
            foregroundIconSet = true;
        }
    }

    @Override
    public void setVisible(boolean b) {
        pack();
        super.setVisible(b);
    }
    // Declaração de variáveis - não modifique//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundImageJLabel;
    // Fim da declaração de variáveis//GEN-END:variables
}
