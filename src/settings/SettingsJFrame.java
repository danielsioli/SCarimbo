/*
 * Copyright (C) 2007  Daniel da Silva Oliveira
 *
 * This file is part of SCarimbo
 *
 * SCarimbo is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Contact: Daniel da Silva Oliveira danieloliveira@anatel.gov.br
 */

/*
 * SettingsJFrame2.java
 *
 * Created on 9 de Julho de 2007, 13:14
 */
package settings;

import java.io.File;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import main.Main;
import settings.AjustmentJFrame;

/**
 *
 * @author  danieloliveira
 */
public class SettingsJFrame extends javax.swing.JFrame {

    private String[] printers = new String[]{""};
    private AjustmentJFrame signatureAjustmentJFrame;
    private AjustmentJFrame pageNumberAjustmentJFrame;
    private JFileChooser jFileChooser;
    private SettingsXMLManager settings;

    /** Creates new form SettingsJFrame2 */
    public SettingsJFrame() {
        System.out.println(new StringBuffer("Abrindo as Configurações do ").append(Main.APP_NAME).toString());
        changeLookAndFeel();
        findPrinters();
        createTree();
        try {
            settings = SettingsXMLManager.getInstance(Main.APP_EXT_SETTINGS);
            signatureAjustmentJFrame = new AjustmentJFrame(this, settings.getProperty(Main.KEYS[Main.SIGNATURE_IMAGE]), settings.getProperty(Main.KEYS[Main.STAMP_IMAGE]));
            pageNumberAjustmentJFrame = new AjustmentJFrame(this, getClass().getResource(Main.EVERGREEN_IMAGE), settings.getProperty(Main.KEYS[Main.STAMP_IMAGE]));
            try {
                signatureAjustmentJFrame.setOffset(Integer.parseInt(settings.getProperty(Main.KEYS[Main.SIGNATURE_X_OFFSET])), Integer.parseInt(settings.getProperty(Main.KEYS[Main.SIGNATURE_Y_OFFSET])));
            } catch (Exception ex) {
                signatureAjustmentJFrame.setZeroOffset();
            }
            try {
                pageNumberAjustmentJFrame.setCenterOffset(Integer.parseInt(settings.getProperty(Main.KEYS[Main.PAGE_NUMBER_X_OFFSET])), Integer.parseInt(settings.getProperty(Main.KEYS[Main.PAGE_NUMBER_Y_OFFSET])));
            } catch (Exception ex) {
                pageNumberAjustmentJFrame.setZeroOffset();
            }
            jFileChooser = new JFileChooser();
            jFileChooser.setMultiSelectionEnabled(false);
            initComponents();
            setLocationRelativeTo(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, new StringBuffer("Erro ao iniciar as configurações: ").append(ex.getMessage()).toString(), new StringBuffer("Configurações do ").append(Main.APP_NAME).toString(), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            System.exit(0);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        signatureJPanel = new javax.swing.JPanel();
        autoSign_Signature_jComboBox = new javax.swing.JComboBox();
        autoSign_Signature_JLabel = new javax.swing.JLabel();
        ajustSignatureImage_Signature_JButton = new javax.swing.JButton();
        privateKey_Signature_JLabel = new javax.swing.JLabel();
        privateKey_Signature_JTextField = new javax.swing.JTextField();
        privateKey_Signature_JButton = new javax.swing.JButton();
        privateKeyPass_Signature_JLabel = new javax.swing.JLabel();
        privateKeyPass_Signature_JPasswordField = new javax.swing.JPasswordField();
        privateKeyStore_Print_JLabel = new javax.swing.JLabel();
        privateKeyStore_Print_JPasswordField = new javax.swing.JPasswordField();
        email_Signature_JLabel = new javax.swing.JLabel();
        email_Signature_JTextField = new javax.swing.JTextField();
        image_Signature_JLabel = new javax.swing.JLabel();
        image_Signature_JTextField = new javax.swing.JTextField();
        image_Signature_JButton = new javax.swing.JButton();
        imageFile_Signature_JLabel = new javax.swing.JLabel();
        pdfFilesJPanel = new javax.swing.JPanel();
        dir_PDFFiles_JLabel = new javax.swing.JLabel();
        dir_PDFFiles_JTextField = new javax.swing.JTextField();
        dir_PDFFiles_JButton = new javax.swing.JButton();
        delete_PDFFiles_JLabel = new javax.swing.JLabel();
        delete_PDFFiles_JComboBox = new javax.swing.JComboBox();
        filesToCreate_PDFFiles_JLabel = new javax.swing.JLabel();
        filesToCreate_PDFFiles_JComboBox = new javax.swing.JComboBox();
        printJPanel = new javax.swing.JPanel();
        printingWay_Print_JLabel = new javax.swing.JLabel();
        printingWay_Print_JComboBox = new javax.swing.JComboBox();
        printer1_Print_JLabel = new javax.swing.JLabel();
        printer1_Print_JComboBox = new javax.swing.JComboBox();
        printer2_Print_JLabel = new javax.swing.JLabel();
        printer2_Print_JComboBox = new javax.swing.JComboBox();
        printer3_Print_JLabel = new javax.swing.JLabel();
        printer3_Print_JComboBox = new javax.swing.JComboBox();
        autoPrint_Print_JLabel = new javax.swing.JLabel();
        autoPrint_Print_JComboBox = new javax.swing.JComboBox();
        acrobat_Print_JLabel = new javax.swing.JLabel();
        acrobat_Print_JTextField = new javax.swing.JTextField();
        acrobat_Print_JButton = new javax.swing.JButton();
        printer4_Print_JLabel = new javax.swing.JLabel();
        printer4_Print_JComboBox = new javax.swing.JComboBox();
        treeJScrollPane = new javax.swing.JScrollPane();
        jTree = new JTree(createTree());
        saveAndExitJButton = new javax.swing.JButton();
        exitJButton = new javax.swing.JButton();
        panelsJScrollPane = new javax.swing.JScrollPane();
        stampJPanel = new javax.swing.JPanel();
        stampFile_Stamp_JLabel = new javax.swing.JLabel();
        stampFile_Stamp_JTextField = new javax.swing.JTextField();
        stampFile_Stamp_JButton = new javax.swing.JButton();
        stampImage_Stamp_JLabel = new javax.swing.JLabel();
        ajustNumber_Stamp_JButton = new javax.swing.JButton();

        signatureJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Assinatura Digital", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        autoSign_Signature_jComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sim", "Não", "Perguntar" }));
        try{
            autoSign_Signature_jComboBox.setSelectedIndex(Integer.parseInt(settings.getProperty(Main.KEYS[Main.AUTO_SIGN])));
        }catch(Exception ex){}

        autoSign_Signature_JLabel.setText("Assinar automaticamente");

        ajustSignatureImage_Signature_JButton.setText("Ajustar posição da Assinatura");
        ajustSignatureImage_Signature_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajustSignatureImage_Signature_JButtonActionPerformed(evt);
            }
        });

        privateKey_Signature_JLabel.setText("Chave privada");

        try{
            privateKey_Signature_JTextField.setText(settings.getProperty(Main.KEYS[Main.KEY_STORE]));
        }catch(Exception ex){}

        privateKey_Signature_JButton.setText("...");
        privateKey_Signature_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateKey_Signature_JButtonActionPerformed(evt);
            }
        });

        privateKeyPass_Signature_JLabel.setText("Senha da chave privada");

        try{
            privateKeyPass_Signature_JPasswordField.setText(settings.getProperty(Main.KEYS[Main.KEY_PASS]));
        }catch(Exception ex){}

        privateKeyStore_Print_JLabel.setText("Senha do arquivo da chave");

        try{
            privateKeyStore_Print_JPasswordField.setText(settings.getProperty(Main.KEYS[Main.STORE_PASS]));
        }catch(Exception ex){}

        email_Signature_JLabel.setText("Email para contato");

        try{
            email_Signature_JTextField.setText(settings.getProperty(Main.KEYS[Main.EMAIL]));
        }catch(Exception ex){}

        image_Signature_JLabel.setText("Imagem da Assinatura");

        image_Signature_JTextField.setText(settings.getProperty(Main.KEYS[Main.SIGNATURE_IMAGE]));

        image_Signature_JButton.setText("...");
        image_Signature_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                image_Signature_JButtonActionPerformed(evt);
            }
        });

        imageFile_Signature_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        if(settings.getProperty(Main.KEYS[Main.SIGNATURE_IMAGE]) != null){
            imageFile_Signature_JLabel.setIcon(new ImageIcon(settings.getProperty(Main.KEYS[Main.SIGNATURE_IMAGE])));
        }else{
            imageFile_Signature_JLabel.setIcon(new ImageIcon(""));
        }

        javax.swing.GroupLayout signatureJPanelLayout = new javax.swing.GroupLayout(signatureJPanel);
        signatureJPanel.setLayout(signatureJPanelLayout);
        signatureJPanelLayout.setHorizontalGroup(
            signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signatureJPanelLayout.createSequentialGroup()
                .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(signatureJPanelLayout.createSequentialGroup()
                        .addComponent(image_Signature_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(autoSign_Signature_JLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(privateKey_Signature_JLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(privateKeyPass_Signature_JLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(email_Signature_JLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(privateKeyStore_Print_JLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(autoSign_Signature_jComboBox, 0, 153, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signatureJPanelLayout.createSequentialGroup()
                        .addComponent(privateKey_Signature_JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(privateKey_Signature_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signatureJPanelLayout.createSequentialGroup()
                        .addComponent(image_Signature_JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(image_Signature_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(privateKeyStore_Print_JPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(email_Signature_JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(privateKeyPass_Signature_JPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)))
            .addComponent(ajustSignatureImage_Signature_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
            .addComponent(imageFile_Signature_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
        );
        signatureJPanelLayout.setVerticalGroup(
            signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signatureJPanelLayout.createSequentialGroup()
                .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoSign_Signature_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoSign_Signature_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(privateKey_Signature_JButton)
                    .addComponent(privateKey_Signature_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(privateKey_Signature_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(privateKeyPass_Signature_JPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(privateKeyPass_Signature_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(privateKeyStore_Print_JLabel)
                    .addComponent(privateKeyStore_Print_JPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(email_Signature_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email_Signature_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(signatureJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(image_Signature_JLabel)
                    .addComponent(image_Signature_JButton)
                    .addComponent(image_Signature_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageFile_Signature_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ajustSignatureImage_Signature_JButton))
        );

        pdfFilesJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Arquivos PDF", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        dir_PDFFiles_JLabel.setText("Diretório com telas em PDF");

        try{
            dir_PDFFiles_JTextField.setText(settings.getProperty(Main.KEYS[Main.SCREENS_DIR]));
        }catch(Exception ex){}

        dir_PDFFiles_JButton.setText("...");
        dir_PDFFiles_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dir_PDFFiles_JButtonActionPerformed(evt);
            }
        });

        delete_PDFFiles_JLabel.setText("Deletar telas após execução");

        delete_PDFFiles_JComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sim", "Não", "Perguntar" }));
        try{
            delete_PDFFiles_JComboBox.setSelectedIndex(Integer.parseInt(settings.getProperty(Main.KEYS[Main.DELETE_AFTER])));
        }catch(Exception ex){}

        filesToCreate_PDFFiles_JLabel.setText("Arquivos a criar");

        filesToCreate_PDFFiles_JComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Numerado", "Não Numerado", "Ambos", "Perguntar" }));
        try{
            filesToCreate_PDFFiles_JComboBox.setSelectedIndex(Integer.parseInt(settings.getProperty(Main.KEYS[Main.FILES_TO_CREATE])));
        }catch(Exception ex){}

        javax.swing.GroupLayout pdfFilesJPanelLayout = new javax.swing.GroupLayout(pdfFilesJPanel);
        pdfFilesJPanel.setLayout(pdfFilesJPanelLayout);
        pdfFilesJPanelLayout.setHorizontalGroup(
            pdfFilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pdfFilesJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pdfFilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(delete_PDFFiles_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dir_PDFFiles_JLabel)
                    .addComponent(filesToCreate_PDFFiles_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pdfFilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pdfFilesJPanelLayout.createSequentialGroup()
                        .addComponent(dir_PDFFiles_JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dir_PDFFiles_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(delete_PDFFiles_JComboBox, 0, 130, Short.MAX_VALUE)
                    .addComponent(filesToCreate_PDFFiles_JComboBox, 0, 130, Short.MAX_VALUE)))
        );
        pdfFilesJPanelLayout.setVerticalGroup(
            pdfFilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pdfFilesJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pdfFilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dir_PDFFiles_JButton)
                    .addComponent(dir_PDFFiles_JLabel)
                    .addComponent(dir_PDFFiles_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pdfFilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete_PDFFiles_JLabel)
                    .addComponent(delete_PDFFiles_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pdfFilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filesToCreate_PDFFiles_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filesToCreate_PDFFiles_JLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        printJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Impressão", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        printingWay_Print_JLabel.setText("Forma de Impressão");

        printingWay_Print_JComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 página por folha", "1 página por folha verso branco", "1 página na frente e 1 no verso", "2 páginas na frente e 2 no verso", "2 páginas na frente", "Ótimo", "Perguntar" }));
        try{
            printingWay_Print_JComboBox.setSelectedIndex(Integer.parseInt(settings.getProperty(Main.KEYS[Main.PRINTING_WAY])));
        }catch(Exception ex){}

        printer1_Print_JLabel.setText("Impressora 1 frente 1 verso");

        printer1_Print_JComboBox.setModel(new javax.swing.DefaultComboBoxModel(printers));
        try{
            printer1_Print_JComboBox.setSelectedItem(settings.getProperty(Main.KEYS[Main.PRINTER1]));
        }catch(Exception ex){}

        printer2_Print_JLabel.setText("Impressora 2 frente 2 verso");

        printer2_Print_JComboBox.setModel(new javax.swing.DefaultComboBoxModel(printers));
        try{
            printer2_Print_JComboBox.setSelectedItem(settings.getProperty(Main.KEYS[Main.PRINTER2]));
        }catch(Exception ex){}

        printer3_Print_JLabel.setText("Impressora 1 por folha");

        printer3_Print_JComboBox.setModel(new javax.swing.DefaultComboBoxModel(printers));
        try{
            printer3_Print_JComboBox.setSelectedItem(settings.getProperty(Main.KEYS[Main.PRINTER3]));
        }catch(Exception ex){}

        autoPrint_Print_JLabel.setText("Imprimir automaticamente");

        autoPrint_Print_JComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nenhum", "Numerado", "Não Numerado", "Ambos", "Perguntar" }));
        try{
            autoPrint_Print_JComboBox.setSelectedIndex(Integer.parseInt(settings.getProperty(Main.KEYS[Main.AUTO_PRINT])));
        }catch(Exception ex){}

        acrobat_Print_JLabel.setText("Acrobat Reader (AcroRd32)");

        try{
            acrobat_Print_JTextField.setText(settings.getProperty(Main.KEYS[Main.ACROBAT_READER]));
        }catch(Exception ex){}

        acrobat_Print_JButton.setText("...");
        acrobat_Print_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acrobat_Print_JButtonActionPerformed(evt);
            }
        });

        printer4_Print_JLabel.setText("Impressora 2 frente");

        printer4_Print_JComboBox.setModel(new javax.swing.DefaultComboBoxModel(printers));
        printer4_Print_JComboBox.setSelectedItem(settings.getProperty(Main.KEYS[Main.PRINTER4]));

        javax.swing.GroupLayout printJPanelLayout = new javax.swing.GroupLayout(printJPanel);
        printJPanel.setLayout(printJPanelLayout);
        printJPanelLayout.setHorizontalGroup(
            printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(printJPanelLayout.createSequentialGroup()
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(printingWay_Print_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(printer1_Print_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(printer3_Print_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(printer2_Print_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(printer4_Print_JLabel)
                    .addComponent(autoPrint_Print_JLabel)
                    .addComponent(acrobat_Print_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(autoPrint_Print_JComboBox, 0, 127, Short.MAX_VALUE)
                    .addComponent(printer3_Print_JComboBox, 0, 127, Short.MAX_VALUE)
                    .addComponent(printer4_Print_JComboBox, 0, 127, Short.MAX_VALUE)
                    .addComponent(printer2_Print_JComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 127, Short.MAX_VALUE)
                    .addComponent(printer1_Print_JComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 127, Short.MAX_VALUE)
                    .addComponent(printingWay_Print_JComboBox, 0, 127, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, printJPanelLayout.createSequentialGroup()
                        .addComponent(acrobat_Print_JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(acrobat_Print_JButton)))
                .addContainerGap())
        );
        printJPanelLayout.setVerticalGroup(
            printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(printJPanelLayout.createSequentialGroup()
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printingWay_Print_JLabel)
                    .addComponent(printingWay_Print_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printer1_Print_JLabel)
                    .addComponent(printer1_Print_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printer2_Print_JLabel)
                    .addComponent(printer2_Print_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printer3_Print_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printer3_Print_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printer4_Print_JLabel)
                    .addComponent(printer4_Print_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoPrint_Print_JLabel)
                    .addComponent(autoPrint_Print_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acrobat_Print_JLabel)
                    .addComponent(acrobat_Print_JButton)
                    .addComponent(acrobat_Print_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(new StringBuffer("Configurações do ").append(Main.APP_NAME).toString());
        setIconImage(new ImageIcon(this.getClass().getResource("/images/Mini - SCarimbo.png")).getImage());
        setResizable(false);

        jTree.setRootVisible(false);
        jTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree.setRootVisible(false);
        jTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeValueChanged(evt);
            }
        });
        treeJScrollPane.setViewportView(jTree);

        saveAndExitJButton.setText("Salvar & Sair");
        saveAndExitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndExitJButtonActionPerformed(evt);
            }
        });

        exitJButton.setText("Apenas Sair");
        exitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJButtonActionPerformed(evt);
            }
        });

        stampJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Imagem do Carimbo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        stampFile_Stamp_JLabel.setText("Arquivo da Imagem");

        stampFile_Stamp_JTextField.setText(settings.getProperty(Main.KEYS[Main.STAMP_IMAGE]));

        stampFile_Stamp_JButton.setText("...");
        stampFile_Stamp_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stampFile_Stamp_JButtonActionPerformed(evt);
            }
        });

        stampImage_Stamp_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        if(settings.getProperty(Main.KEYS[Main.STAMP_IMAGE]) != null){
            stampImage_Stamp_JLabel.setIcon(new javax.swing.ImageIcon(settings.getProperty(Main.KEYS[Main.STAMP_IMAGE])));
        }else{
            stampImage_Stamp_JLabel.setIcon(new javax.swing.ImageIcon(""));
        }

        ajustNumber_Stamp_JButton.setText("Ajustar posição do número de página");
        ajustNumber_Stamp_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajustNumber_Stamp_JButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stampJPanelLayout = new javax.swing.GroupLayout(stampJPanel);
        stampJPanel.setLayout(stampJPanelLayout);
        stampJPanelLayout.setHorizontalGroup(
            stampJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stampJPanelLayout.createSequentialGroup()
                .addComponent(stampFile_Stamp_JLabel)
                .addGap(14, 14, 14)
                .addComponent(stampFile_Stamp_JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stampFile_Stamp_JButton)
                .addGap(1, 1, 1))
            .addComponent(stampImage_Stamp_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
            .addComponent(ajustNumber_Stamp_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
        );
        stampJPanelLayout.setVerticalGroup(
            stampJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stampJPanelLayout.createSequentialGroup()
                .addComponent(stampImage_Stamp_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(stampJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stampFile_Stamp_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stampFile_Stamp_JButton)
                    .addComponent(stampFile_Stamp_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ajustNumber_Stamp_JButton))
        );

        panelsJScrollPane.setViewportView(stampJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveAndExitJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(treeJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(treeJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                    .addComponent(panelsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveAndExitJButton)
                    .addComponent(exitJButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ajustNumber_Stamp_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajustNumber_Stamp_JButtonActionPerformed
        if (stampFile_Stamp_JTextField.getText().equals("") || !(new File(stampFile_Stamp_JTextField.getText()).exists())) {
            JOptionPane.showMessageDialog(this, "Arquivos de carimbo não configurado corretamente", Main.APP_NAME, JOptionPane.ERROR_MESSAGE);
        } else {
            pageNumberAjustmentJFrame.setBackgroundImage(stampFile_Stamp_JTextField.getText());
            pageNumberAjustmentJFrame.setForegroundImageAsResource(Main.EVERGREEN_IMAGE);
            pageNumberAjustmentJFrame.setVisible(true);
            setEnabled(false);
        }
    }//GEN-LAST:event_ajustNumber_Stamp_JButtonActionPerformed

    private void stampFile_Stamp_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stampFile_Stamp_JButtonActionPerformed
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooser.resetChoosableFileFilters();
        if (!stampFile_Stamp_JTextField.getText().equals("")) {
            jFileChooser.setCurrentDirectory(new File(stampFile_Stamp_JTextField.getText()).getParentFile());
        } else {
            jFileChooser.setCurrentDirectory(FileSystemView.getFileSystemView().getDefaultDirectory());
        }
        jFileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.getName().endsWith(".png") | f.getName().endsWith(".gif") | !f.isFile() | f.getName().endsWith(".lnk")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "Imagem do carimbo";
            }
        });
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File dir = jFileChooser.getSelectedFile();
            if (dir != null && dir.exists()) {
                stampImage_Stamp_JLabel.setIcon(new javax.swing.ImageIcon(dir.getAbsolutePath()));
            } else {
                stampImage_Stamp_JLabel.setIcon(new javax.swing.ImageIcon(""));
            }
            stampFile_Stamp_JTextField.setText(dir.getAbsolutePath());
        }
    }//GEN-LAST:event_stampFile_Stamp_JButtonActionPerformed

    private void image_Signature_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_image_Signature_JButtonActionPerformed
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooser.resetChoosableFileFilters();
        if (!image_Signature_JTextField.getText().equals("")) {
            jFileChooser.setCurrentDirectory(new File(image_Signature_JTextField.getText()).getParentFile());
        } else {
            jFileChooser.setCurrentDirectory(FileSystemView.getFileSystemView().getDefaultDirectory());
        }
        jFileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.getName().endsWith(".png") | f.getName().endsWith(".gif") | !f.isFile() | f.getName().endsWith(".lnk")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "Imagem da Assinatura";
            }
        });
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File dir = jFileChooser.getSelectedFile();
            if (dir != null && dir.exists()) {
                imageFile_Signature_JLabel.setIcon(new javax.swing.ImageIcon(dir.getAbsolutePath()));
            } else {
                imageFile_Signature_JLabel.setIcon(new javax.swing.ImageIcon(""));
            }
            image_Signature_JTextField.setText(dir.getAbsolutePath());
        }
    }//GEN-LAST:event_image_Signature_JButtonActionPerformed

    private void acrobat_Print_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acrobat_Print_JButtonActionPerformed
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooser.resetChoosableFileFilters();
        if (!acrobat_Print_JTextField.getText().equals("")) {
            jFileChooser.setCurrentDirectory(new File(acrobat_Print_JTextField.getText()).getParentFile());
        } else {
            jFileChooser.setCurrentDirectory(FileSystemView.getFileSystemView().getDefaultDirectory());
        }
        jFileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.getName().endsWith(".exe") | !f.isFile() | f.getName().endsWith(".lnk")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "Acrobat Reader";
            }
        });
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File dir = jFileChooser.getSelectedFile();
            acrobat_Print_JTextField.setText(dir.getAbsolutePath());
        }
    }//GEN-LAST:event_acrobat_Print_JButtonActionPerformed

    private void privateKey_Signature_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateKey_Signature_JButtonActionPerformed
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooser.resetChoosableFileFilters();
        if (!privateKey_Signature_JTextField.getText().equals("")) {
            jFileChooser.setCurrentDirectory(new File(privateKey_Signature_JTextField.getText()).getParentFile());
        } else {
            jFileChooser.setCurrentDirectory(FileSystemView.getFileSystemView().getDefaultDirectory());
        }
        jFileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.getName().endsWith(".pfx") | !f.isFile() | f.getName().endsWith(".lnk")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "Assinatura digital";
            }
        });
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File dir = jFileChooser.getSelectedFile();
            privateKey_Signature_JTextField.setText(dir.getAbsolutePath());
        }
    }//GEN-LAST:event_privateKey_Signature_JButtonActionPerformed

    private void ajustSignatureImage_Signature_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajustSignatureImage_Signature_JButtonActionPerformed
        if (image_Signature_JTextField.getText().equals("") || !(new File(image_Signature_JTextField.getText()).exists()) || stampFile_Stamp_JTextField.getText().equals("") || !(new File(stampFile_Stamp_JTextField.getText()).exists())) {
            JOptionPane.showMessageDialog(this, "Arquivos de carimbo ou assinatura não configurados corretamente", Main.APP_NAME, JOptionPane.ERROR_MESSAGE);
        } else {
            signatureAjustmentJFrame.setBackgroundImage(stampFile_Stamp_JTextField.getText());
            signatureAjustmentJFrame.setForegroundImage(image_Signature_JTextField.getText());
            signatureAjustmentJFrame.setVisible(true);
            setEnabled(false);
        }
    }//GEN-LAST:event_ajustSignatureImage_Signature_JButtonActionPerformed

    private void dir_PDFFiles_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dir_PDFFiles_JButtonActionPerformed
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.resetChoosableFileFilters();
        if (!dir_PDFFiles_JTextField.getText().equals("")) {
            jFileChooser.setCurrentDirectory(new File(dir_PDFFiles_JTextField.getText()));
        } else {
            jFileChooser.setCurrentDirectory(FileSystemView.getFileSystemView().getDefaultDirectory());
        }
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File dir = jFileChooser.getSelectedFile();
            dir_PDFFiles_JTextField.setText(dir.getAbsolutePath());
        }
    }//GEN-LAST:event_dir_PDFFiles_JButtonActionPerformed

    private void saveAndExitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndExitJButtonActionPerformed
        boolean save = true;

        if (autoPrint_Print_JComboBox.getSelectedIndex() != Main.AUTO_PRINT_NONE) {
            if (acrobat_Print_JTextField.getText().equals("") || !(new File(acrobat_Print_JTextField.getText()).exists())) {
                JOptionPane.showMessageDialog(this, "Para imprimir automaticamente, você deve setar o campo " + acrobat_Print_JLabel.getText(), Main.APP_NAME, JOptionPane.ERROR_MESSAGE);
                save = false;
            }
        }

        if (autoSign_Signature_jComboBox.getSelectedIndex() != Main.AUTO_SIGN_NO) {
            if (image_Signature_JTextField.getText().equals("") || !(new File(image_Signature_JTextField.getText()).exists())) {
                JOptionPane.showMessageDialog(this, "Arquivo de imagem " + image_Signature_JTextField.getText() + " não existe", Main.APP_NAME, JOptionPane.ERROR_MESSAGE);
                save = false;
            }
        }

        if (!privateKey_Signature_JTextField.getText().equals("") && !(new File(privateKey_Signature_JTextField.getText()).exists())) {
            JOptionPane.showMessageDialog(this, "Arquivo de chave privada " + privateKey_Signature_JTextField.getText() + " não foi encontrado", Main.APP_NAME, JOptionPane.ERROR_MESSAGE);
            save = false;
        }

        if (!privateKey_Signature_JTextField.getText().equals("") && (new File(privateKey_Signature_JTextField.getText()).exists())) {
            if (email_Signature_JTextField.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Você deve fornecer um endereço de contato.", Main.APP_NAME, JOptionPane.ERROR_MESSAGE);
                save = false;
            }
        }

        if (dir_PDFFiles_JTextField.getText().equals("") || !(new File(dir_PDFFiles_JTextField.getText()).exists())) {
            JOptionPane.showMessageDialog(this, "Você deve escolher o diretório onde as telas serão armazenadas", Main.APP_NAME, JOptionPane.ERROR_MESSAGE);
            save = false;
        }

        if (filesToCreate_PDFFiles_JComboBox.getSelectedIndex() != Main.FILES_TO_CREATE_UNNUMBERED && autoPrint_Print_JComboBox.getSelectedIndex() != Main.AUTO_PRINT_UNNUMBERED) {
            if (stampFile_Stamp_JTextField.getText().equals("") || !(new File(stampFile_Stamp_JTextField.getText()).exists())) {
                JOptionPane.showMessageDialog(this, "Você deve escolher a imagem do carimbo", Main.APP_NAME, JOptionPane.ERROR_MESSAGE);
                save = false;
            }
        }

        System.gc();

        if (save) {
            saveSettings();
            System.exit(0);
        }
    }//GEN-LAST:event_saveAndExitJButtonActionPerformed

    private void exitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJButtonActionPerformed
        System.out.println("Saindo sem salvar dados...");
        System.exit(0);
    }//GEN-LAST:event_exitJButtonActionPerformed

    private void jTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeValueChanged
        DefaultMutableTreeNode selected = (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();

        if (selected == null) {
            return;
        }
        if (selected.isLeaf()) {
            if ("Impressão".equals("" + selected.getUserObject())) {
                panelsJScrollPane.setViewportView(printJPanel);
            } else if ("Arquivos PDF".equals("" + selected.getUserObject())) {
                panelsJScrollPane.setViewportView(pdfFilesJPanel);
            } else if ("Assinatura Digital".equals("" + selected.getUserObject())) {
                panelsJScrollPane.setViewportView(signatureJPanel);
            } else if ("Imagem do Carimbo".equals("" + selected.getUserObject())) {
                panelsJScrollPane.setViewportView(stampJPanel);
            }
        }
        pack();
    }//GEN-LAST:event_jTreeValueChanged

    private DefaultMutableTreeNode createTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Configurações");

        DefaultMutableTreeNode category = null;

        category = new DefaultMutableTreeNode("Imagem do Carimbo");
        root.add(category);

        category = new DefaultMutableTreeNode("Impressão");
        root.add(category);

        category = new DefaultMutableTreeNode("Arquivos PDF");
        root.add(category);

        category = new DefaultMutableTreeNode("Assinatura Digital");
        root.add(category);

        return root;
    }

    private void changeLookAndFeel() {
        try {
            UIManager.LookAndFeelInfo looks[] = UIManager.getInstalledLookAndFeels();
            UIManager.setLookAndFeel(looks[2].getClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void findPrinters() {
        PrintService[] printService = PrintServiceLookup.lookupPrintServices(null, null);
        printers = new String[printService.length];
        for (int i = 0; i < printService.length; i++) {
            printers[i] = printService[i].getName();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new SettingsJFrame().setVisible(true);
            }
        });
    }

    private void saveSettings() {
        String[] values = new String[]{dir_PDFFiles_JTextField.getText(), "" + filesToCreate_PDFFiles_JComboBox.getSelectedIndex(),
            "" + printingWay_Print_JComboBox.getSelectedIndex(), "" + delete_PDFFiles_JComboBox.getSelectedIndex(),
            "" + autoPrint_Print_JComboBox.getSelectedIndex(), "" + autoSign_Signature_jComboBox.getSelectedIndex(),
            acrobat_Print_JTextField.getText(), "" + printer1_Print_JComboBox.getSelectedItem(), "" + printer2_Print_JComboBox.getSelectedItem(), "" + printer3_Print_JComboBox.getSelectedItem(), "" + printer4_Print_JComboBox.getSelectedItem(),
            "" + signatureAjustmentJFrame.getXOffset(), "" + signatureAjustmentJFrame.getYOffset(), privateKey_Signature_JTextField.getText(),
            new String(privateKeyPass_Signature_JPasswordField.getPassword()), new String(privateKeyStore_Print_JPasswordField.getPassword()),
            email_Signature_JTextField.getText(), image_Signature_JTextField.getText(), stampFile_Stamp_JTextField.getText(),
            "" + pageNumberAjustmentJFrame.getCenterXOffset(), "" + pageNumberAjustmentJFrame.getCenterYOffset()
        };
        System.out.println("Salvando dados...");
        try {
            settings.setProperties(Main.KEYS, values);
            settings.printXML();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, new StringBuffer("Erro ao salvar configurações: ").append(ex.getMessage()).toString(), new StringBuffer("Configurações do ").append(Main.APP_NAME).toString(), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acrobat_Print_JButton;
    private javax.swing.JLabel acrobat_Print_JLabel;
    private javax.swing.JTextField acrobat_Print_JTextField;
    private javax.swing.JButton ajustNumber_Stamp_JButton;
    private javax.swing.JButton ajustSignatureImage_Signature_JButton;
    private javax.swing.JComboBox autoPrint_Print_JComboBox;
    private javax.swing.JLabel autoPrint_Print_JLabel;
    private javax.swing.JLabel autoSign_Signature_JLabel;
    private javax.swing.JComboBox autoSign_Signature_jComboBox;
    private javax.swing.JComboBox delete_PDFFiles_JComboBox;
    private javax.swing.JLabel delete_PDFFiles_JLabel;
    private javax.swing.JButton dir_PDFFiles_JButton;
    private javax.swing.JLabel dir_PDFFiles_JLabel;
    private javax.swing.JTextField dir_PDFFiles_JTextField;
    private javax.swing.JLabel email_Signature_JLabel;
    private javax.swing.JTextField email_Signature_JTextField;
    private javax.swing.JButton exitJButton;
    private javax.swing.JComboBox filesToCreate_PDFFiles_JComboBox;
    private javax.swing.JLabel filesToCreate_PDFFiles_JLabel;
    private javax.swing.JLabel imageFile_Signature_JLabel;
    private javax.swing.JButton image_Signature_JButton;
    private javax.swing.JLabel image_Signature_JLabel;
    private javax.swing.JTextField image_Signature_JTextField;
    private javax.swing.JTree jTree;
    private javax.swing.JScrollPane panelsJScrollPane;
    private javax.swing.JPanel pdfFilesJPanel;
    private javax.swing.JPanel printJPanel;
    private javax.swing.JComboBox printer1_Print_JComboBox;
    private javax.swing.JLabel printer1_Print_JLabel;
    private javax.swing.JComboBox printer2_Print_JComboBox;
    private javax.swing.JLabel printer2_Print_JLabel;
    private javax.swing.JComboBox printer3_Print_JComboBox;
    private javax.swing.JLabel printer3_Print_JLabel;
    private javax.swing.JComboBox printer4_Print_JComboBox;
    private javax.swing.JLabel printer4_Print_JLabel;
    private javax.swing.JComboBox printingWay_Print_JComboBox;
    private javax.swing.JLabel printingWay_Print_JLabel;
    private javax.swing.JLabel privateKeyPass_Signature_JLabel;
    private javax.swing.JPasswordField privateKeyPass_Signature_JPasswordField;
    private javax.swing.JLabel privateKeyStore_Print_JLabel;
    private javax.swing.JPasswordField privateKeyStore_Print_JPasswordField;
    private javax.swing.JButton privateKey_Signature_JButton;
    private javax.swing.JLabel privateKey_Signature_JLabel;
    private javax.swing.JTextField privateKey_Signature_JTextField;
    private javax.swing.JButton saveAndExitJButton;
    private javax.swing.JPanel signatureJPanel;
    private javax.swing.JButton stampFile_Stamp_JButton;
    private javax.swing.JLabel stampFile_Stamp_JLabel;
    private javax.swing.JTextField stampFile_Stamp_JTextField;
    private javax.swing.JLabel stampImage_Stamp_JLabel;
    private javax.swing.JPanel stampJPanel;
    private javax.swing.JScrollPane treeJScrollPane;
    // End of variables declaration//GEN-END:variables
}
